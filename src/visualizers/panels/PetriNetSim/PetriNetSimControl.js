/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Nov 26 2019 16:16:48 GMT-0600 (Central Standard Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames',
    'blob/BlobClient'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames,
    BlobClient
) {

    'use strict';

    function PetriNetSimControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;
        this._blobClient = new BlobClient({logger:this._logger.fork('BlobClient')});

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
        this._initialLoaded = false;
    }

    PetriNetSimControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    PetriNetSimControl.prototype.selectedObjectChanged = function (nodeId) {
        var desc = this._getObjectDescriptor(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');
        self._initialLoaded=false;

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 1};  // Territory "rule"

            self._widget.setTitle(desc.name.toUpperCase());

            if (typeof desc.parentId === 'string') {
                self.$btnModelHierarchyUp.show();
            } else {
                self.$btnModelHierarchyUp.hide();
            }

            self._currentNodeParentId = desc.parentId;

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);

            // self._selfPatterns[nodeId] = {children: 1};
            // self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    PetriNetSimControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            metaNode,
            objDescriptor={
                name:'N/A'
            };

        if (node) {
            objDescriptor = {
                id: undefined,
                name: undefined,
                childrenIds: undefined,
                parentId: undefined,
                isConnection: false,
                position: {
                    x:0,
                    y:0
                },
                connects:{
                    srcId: null,
                    dstId: null
                },
                multiplicity: 0,
                metaType: null,
                capacity: 30,
                marking: 0
            };
            
            objDescriptor.id = node.getId();
            objDescriptor.name = node.getAttribute(nodePropertyNames.Attributes.name);
            objDescriptor.childrenIds = node.getChildrenIds();
            objDescriptor.parentId = node.getParentId();
            objDescriptor.isConnection = GMEConcepts.isConnection(nodeId);
            objDescriptor.marking = node.getAttribute('marking');
         
            if(objDescriptor.isConnection){
                objDescriptor.connects.srcId = node.getPointer('src').to;
                objDescriptor.connects.dstId = node.getPointer('dst').to;
                objDescriptor.multiplicity = node.getAttribute('multiplicity');
            }

            objDescriptor.position =node.getRegistry('position');

            metaNode = this._client.getNode(node.getMetaTypeId());
            if(metaNode){
                objDescriptor.metaType = metaNode.getAttribute('name');
            }

        }

        return objDescriptor;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    PetriNetSimControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            petriNetData = {
                simulatorUrl:null,
                descriptors:{}
            },
            node,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        if(this._initialLoaded === false){
            this._initialLoaded = true;
            this._logger.debug('events',events);
            for(i = 0 ;i<events.length;i+=1){
                event  = events[i];
                if(event.etype==='load'){
                    if(event.eid===this._currentNodeId){
                        node = this._client.getNode(event.eid);
                        petriNetData.simulatorUrl = this._blobClient.getViewURL(node.getAttribute('simulator'),'index.html');   
                    } else{
                        petriNetData.descriptors[event.eid] = this._getObjectDescriptor(event.eid);
                    }
                }else{
                    this._logger.debug('Skipping event of type', event.etype);
                }
            }

            this._widget.populateGraph(petriNetData);
        } else{
            while (i--) {
                event = events[i];
                switch (event.etype) {
                    case CONSTANTS.TERRITORY_EVENT_LOAD:
                        this._onLoad(event.eid);
                        break;
                    case CONSTANTS.TERRITORY_EVENT_UPDATE:
                        this._onUpdate(event.eid);
                        break;
                    case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                        this._onUnload(event.eid);
                        break;
                    default:
                        break;
                }
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    PetriNetSimControl.prototype._onLoad = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.addNode(description);
    };

    PetriNetSimControl.prototype._onUpdate = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.updateNode(description);
    };

    PetriNetSimControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };

    PetriNetSimControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetSimControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    PetriNetSimControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    PetriNetSimControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    PetriNetSimControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerSuppressVisualizerFromNode(true);
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId);
            WebGMEGlobal.State.registerSuppressVisualizerFromNode(false);
        }
    };

    PetriNetSimControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    PetriNetSimControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    PetriNetSimControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    PetriNetSimControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    PetriNetSimControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return PetriNetSimControl;
});
